#!/usr/bin/env python3
import requests
from random import randrange

def rsa_encrypt(m, e, n):
    return pow(m, e, n)

def rsa_decrypt(c, d, n):
    return pow(c, d, n)

def euclidExtended(a, b):
    r1 = a
    r2 = b

    s1 = 1
    s2 = 0

    t1 = 0
    t2 = 1

    while True:
        q = r1 // r2
        r = r1 % r2

        if r == 0:
            return r2, max(t2, s2), min(t2, s2)

        s = s1 - q * s2
        t = t1 - q * t2

        r1 = r2
        r2 = r
        s1 = s2
        s2 = s
        t1 = t2
        t2 = t

def modinv(a, m):
    return euclidExtended(a, m)[1]

# Server info
e = 65537
n = 18451551848834489385334757943188510514579227974519462324008531007012379617580104778477749733003708368992230487178683577374192557858631282437294259449814831352241948714554579620365028586427462639102007397861910004889918044478102436015931441090041628564593611289981126143875870950072518986410591771040633246732515130254122011364555287584370332661505200616576812590158136780699424421415050268681116836070372355592799667329369754305258701881829815439845157653412486029908626559606053466186720757705161022626720104436569944306849573169525017120849115155112254578534505216173634147911469874217178526787810786801464089151661
encrypted = 11970818755674646487278875666263009265947876548899868325692567789853565144579441180927896959192891922576154653594935186262513608735990830691858576966773018165064008483687244433925547626184240279290772528169896391093801190272715614877546603131513495228664509737423996633040240367050052924055706710748894148596069074793444483108871755505166628084538725728970503227428527914884198908074185787784319480126026508751801833286895999745473701001724760388237938804269737593863314716794355540186479463394708063689302515114782005772977664819193379566586954491039305549196787558461194226551840227664340255721349216430035336512641

known = []
i = 0

while True:
    i += 1

    s = randrange(1, n) # A random number
    sinv = modinv(s, n) # The inverse of that number
    sc = rsa_encrypt(s, e, n) # Encrypt the random number
    c2 = sc * encrypted % n # Multiply it with the encrypted flag, now we have (s * flag) ** e

    p2 = requests.get("http://localhost:4004/decrypt?message=%d" % c2).text # Decrypt the whole thing, now we have (s * flag)
    p2 = int(p2)
    p = p2 * sinv % n # Multiply by the inverse of s (i.e: "divide" by s) to get the flag

    # Keep trying until we get the same plaintext twice (this usually takes less than 10 attempts)

    if p not in known:
        known.append(p)
    else:
        p = bytes.fromhex(hex(p)[2 :]).decode()
        print("%s, %d tries" % (p, i))
        exit()