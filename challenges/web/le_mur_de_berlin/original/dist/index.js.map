{"version":3,"sources":["index.js"],"names":["MAP_WIDTH","MAP_HEIGHT","TILE_SIZE","assets","getAssets","objects","id","name","asset","map","initMap","playerPos","x","y","Math","floor","otherPlayers","socket","WebSocket","idToObject","objectValues","Object","values","i","length","object","Error","row","Array","j","push","center","wall","Image","src","grass","dirt","player","flag","drawMap","ctx","objectId","position_y","position_x","drawImage","drawPlayer","drawOtherPlayer","forEach","initKeyboardListener","document","addEventListener","handleKeyDown","event","direction","dx","dy","eventCodeToDirection","code","targetPosition","redraw","send","JSON","stringify","canvas","getElementById","getContext","console","log","otherPlayer","parse","data","delete","err","warn","window","onload","width","height"],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["const MAP_WIDTH = 10; // in tiles\nconst MAP_HEIGHT = 10; // in tiles\nconst TILE_SIZE = 32;\n\nconst assets = getAssets()\n\nconst objects = {\n    \"grass\": {\n        id: 0,\n        name: \"nothing\",\n        asset: assets[\"grass\"]\n    }, \n    \"wall\": {\n        id: 1,\n        name: \"wall\",\n        asset: assets[\"wall\"]\n    },\n    \"player\": {\n        id: 2,\n        name: \"player\",\n        asset: assets[\"player\"]\n    },\n    \"dirt\": {\n        id: 3,\n        name: \"dirt\",\n        asset: assets[\"dirt\"]\n    }, \n    \"flag\": {\n        id: 4,\n        name: \"flag\",\n        asset: assets[\"flag\"]\n    }\n}\n\nconst map = initMap()\n\nlet playerPos = {\n    x: 1,\n    y: Math.floor(MAP_HEIGHT / 2) - 1\n}\n\nlet otherPlayers = {}\n\nconst socket = new WebSocket(\"ws://localhost:6969\")\n\nsocket.addEventListener('open', function (event) {\n    console.log('Connexion established');\n    socket.send(JSON.stringify(playerPos))\n});\n\n// Listen for messages\nsocket.addEventListener('message', function (event) {\n    try {\n        const otherPlayer = JSON.parse(event.data)\n        if (otherPlayer.delete) {\n            delete otherPlayers[otherPlayer.id]\n        } else {\n            otherPlayers[otherPlayer.id] = otherPlayer\n        }\n        redraw()\n    } catch (err) {\n        console.warn(\"Received something unusual... \" + event.data)\n    }\n});\n\nfunction idToObject(id) {\n    const objectValues = Object.values(objects)\n    for (let i = 0; i<objectValues.length; i++) {\n        const object = objectValues[i]\n        if (object.id == id) {\n            return object\n        }\n    }\n    throw new Error(`Object with id ${id} not found`)\n}\n\nfunction initMap() {\n    const map = []\n    for (let i = 0; i<MAP_HEIGHT; i++) {\n        const row = Array(MAP_WIDTH)\n        for (let j = 0; j<MAP_WIDTH; j++) {\n            if (j < MAP_WIDTH / 2) {\n                row[j] = objects[\"dirt\"].id\n            } else {\n                row[j] = objects[\"grass\"].id\n            }\n        }\n        map.push(row)\n    }\n\n    for (let i = 0; i<MAP_HEIGHT; i++) {\n        const center = Math.floor(MAP_WIDTH / 2)\n        map[i][center] = objects[\"wall\"].id\n    }\n\n    map[MAP_HEIGHT/2-1][MAP_WIDTH-2] = objects[\"flag\"].id\n\n    return map\n}\n\nfunction getAssets() {\n    const wall = new Image()\n    wall.src = \"img/wall.png\"\n    const grass = new Image()\n    grass.src = \"img/grass.jpg\"\n    const dirt = new Image()\n    dirt.src = \"img/dirt.jpg\"\n    const player = new Image()\n    player.src = \"img/player.png\"\n    const flag = new Image()\n    flag.src = \"img/flag.png\"\n\n    return {\n        wall,\n        grass,\n        player,\n        dirt,\n        flag\n    }\n}\n\nfunction drawMap(ctx) {\n    for (let i = 0; i<MAP_HEIGHT; i++) {\n        for (let j = 0; j<MAP_WIDTH; j++) {\n            const objectId = map[i][j]\n            const object = idToObject(objectId)\n            if (object.asset) {\n                position_y = i * TILE_SIZE\n                position_x = j * TILE_SIZE\n                ctx.drawImage(object.asset, position_x, position_y, TILE_SIZE, TILE_SIZE)\n            }\n        }\n    }\n}\nfunction drawPlayer(ctx) {\n    position_x = playerPos.x * TILE_SIZE\n    position_y = playerPos.y * TILE_SIZE\n    ctx.drawImage(objects.player.asset, position_x, position_y, TILE_SIZE, TILE_SIZE)\n}\n\nfunction drawOtherPlayer(ctx) {\n    Object.values(otherPlayers).forEach(player => {\n        position_x = player.x * TILE_SIZE\n        position_y = player.y * TILE_SIZE\n        ctx.drawImage(objects.player.asset, position_x, position_y, TILE_SIZE, TILE_SIZE)\n    })\n}\n\n\n\nfunction initKeyboardListener() {\n    document.addEventListener('keydown', handleKeyDown)\n}\n\nfunction handleKeyDown(event) {\n    let direction = { dx: 0, dy: 0}\n    const eventCodeToDirection = {\n        \"ArrowDown\": { dx:0, dy: 1},\n        \"ArrowUp\": { dx:0, dy: -1},\n        \"ArrowLeft\": { dx: -1, dy: 0},\n        \"ArrowRight\": { dx: 1, dy: 0}\n    };\n    if (eventCodeToDirection[event.code]) {\n        direction = eventCodeToDirection[event.code]\n    } else {\n        return\n    }\n    const targetPosition = {\n        x: playerPos.x + direction.dx,\n        y: playerPos.y + direction.dy\n    }\n    if (targetPosition.x < 0 || targetPosition.y < 0) {\n        return\n    }\n    if (targetPosition.x >= MAP_WIDTH || targetPosition.y >= MAP_HEIGHT) {\n        return\n    }\n    const objectAtTargetPosition = map[targetPosition.y][targetPosition.x]\n    if (objectAtTargetPosition === objects.wall.id) {\n        return\n    }\n    playerPos = targetPosition\n    redraw()\n    socket.send(JSON.stringify(playerPos))\n}\n\nfunction redraw() {\n    const canvas = document.getElementById('canvas')\n    const ctx = canvas.getContext('2d')\n    drawMap(ctx)\n    drawOtherPlayer(ctx)\n    drawPlayer(ctx)\n}\n\nwindow.onload = function() {\n    const canvas = document.getElementById('canvas')\n    canvas.width = TILE_SIZE * MAP_WIDTH\n    canvas.height = TILE_SIZE * MAP_HEIGHT\n    redraw()\n    initKeyboardListener()\n}\n"]}